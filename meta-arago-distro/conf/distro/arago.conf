# Name and version of the distribution
DISTRO_NAME = "Arago"
DISTRO_VERSION = "2021.09"
DISTRO_FEED_URI ?= "http://lcpd.itg.ti.com"
BUILD_VARIANT = "${@['prod','rt','systest'][int(d.getVar('ARAGO_RT_ENABLE'))+int(d.getVar('ARAGO_SYSTEST_ENABLE'))*2]}"
TISDK_VERSION ?= "live"
FEEDURIPREFIX ?= "packages/${DISTRO}-dunfell/${TISDK_VERSION}/${BUILD_VARIANT}/"

OPKG_ARGS_remove = "--prefer-arch-to-version"

TI_MIRROR = "http://software-dl.ti.com/processor-sdk-mirror/sources/"
MIRRORS += " \
bzr://.*/.*      ${TI_MIRROR} \n \
cvs://.*/.*      ${TI_MIRROR} \n \
git://.*/.*      ${TI_MIRROR} \n \
gitsm://.*/.*    ${TI_MIRROR} \n \
hg://.*/.*       ${TI_MIRROR} \n \
osc://.*/.*      ${TI_MIRROR} \n \
p4://.*/.*       ${TI_MIRROR} \n \
npm://.*/.*      ${TI_MIRROR} \n \
ftp://.*/.*      ${TI_MIRROR} \n \
https?$://.*/.*  ${TI_MIRROR} \n \
svn://.*/.*      ${TI_MIRROR} \n \
"

# SDK paths and names
SDK_NAME_PREFIX = "arago"
SDK_VERSION = "${DISTRO_VERSION}"
SDK_VENDOR = "-${SDK_NAME_PREFIX}"
SDK_NAME = "${SDK_NAME_PREFIX}-${SDK_VERSION}"
SDKPATH_REAL = "/usr/local/${SDK_NAME_PREFIX}-${SDK_VERSION}"
SDKPATH = "${@"/tmp/"+"x"*96+"/"+"y"*96}"

IMAGE_CLASSES += "image_types_md5"
IMAGE_FSTYPES += "tar.xz.md5"

# FIT image for secure devices
KERNEL_CLASSES += "kernel-fitimage"
FITIMAGE_HASH_ALGO = ""
FITIMAGE_PACK_TEE = "0"
FITIMAGE_PACK_TEE_am437x-hs-evm = "1"
FITIMAGE_PACK_TEE_am57xx-hs-evm = "1"
FITIMAGE_PACK_TEE_dra7xx-hs-evm = "1"
FITIMAGE_DTB_BY_NAME = "1"
FITIMAGE_TEE_BY_NAME = "1"
FITIMAGE_CONF_BY_NAME = "1"

KERNEL_IMAGETYPES_dra7xx-hs-evm = "zImage fitImage"
KERNEL_IMAGETYPES_am57xx-hs-evm = "zImage fitImage"
KERNEL_IMAGETYPES_am437x-hs-evm = "zImage fitImage"
KERNEL_IMAGETYPES_am335x-hs-evm = "zImage fitImage"
KERNEL_IMAGETYPES_am65xx-hs-evm = "Image fitImage"
KERNEL_IMAGETYPES_am64xx-hs-evm = "Image fitImage"
KERNEL_IMAGETYPES_j7-hs-evm = "Image fitImage"
KERNEL_IMAGETYPES_j7200-hs-evm = "Image fitImage"
KERNEL_IMAGETYPES_j721s2-hs-evm = "Image fitImage"
KERNEL_IMAGETYPES_j784s4-hs-evm = "Image fitImage"

KERNEL_IMAGETYPES_k2e-hs-evm = "zImage fitImage"
INITRAMFS_IMAGE_k2e-hs-evm = "k2-fw-initrd"
INITRAMFS_FSTYPES_k2e-hs-evm = "cpio.gz"

KERNEL_IMAGETYPES_k2hk-hs-evm = "zImage fitImage"
INITRAMFS_IMAGE_k2hk-hs-evm = "k2-fw-initrd"
INITRAMFS_FSTYPES_k2hk-hs-evm = "cpio.gz"

KERNEL_IMAGETYPES_k2g-hs-evm = "zImage fitImage"
INITRAMFS_IMAGE_k2g-hs-evm = "k2-fw-initrd"
INITRAMFS_FSTYPES_k2g-hs-evm = "cpio.gz"

KERNEL_IMAGETYPES_k2l-hs-evm = "zImage fitImage"
INITRAMFS_IMAGE_k2l-hs-evm = "k2-fw-initrd"
INITRAMFS_FSTYPES_k2l-hs-evm = "cpio.gz"

# Extra boot files for WIC images
do_image_wic[depends] += "tisdk-uenv:do_deploy"
IMAGE_BOOT_FILES += "uEnv.txt"

# Mask any broken recipes (currently none)
#BBMASK = ""

TCMODEAPPEND ?= "-${TCMODE}"
TMPDIR .= "${TCMODEAPPEND}"

LIBC_DEPENDENCIES_remove = "glibc-gconv-cp1252 glibc-gconv-ibm850 glibc-gconv-iso8859-1 glibc-gconv-iso8859-15 glibc-localedata-i18n"

# Start with default set of distro features
DISTRO_FEATURES = "${DISTRO_FEATURES_DEFAULT} ${DISTRO_FEATURES_LIBC}"

# Remove some unwanted features
DISTRO_FEATURES_remove = "x11"

# Add additional distro features
DISTRO_FEATURES_append = " pam wayland opengl"
DISTRO_FEATURES_append = " opencl"
DISTRO_FEATURES_append = " opencv"
DISTRO_FEATURES_append = " openmp"

# Normally target distro features will not be applied to native builds:
# Native distro features on this list will use the target feature value
DISTRO_FEATURES_FILTER_NATIVE_append = " opencl opencv openmp"
DISTRO_FEATURES_FILTER_NATIVESDK_append = " opencl opencv openmp"

# Set global runtime providers for major components
ARAGO_SYSVINIT ?= "0"
VIRTUAL-RUNTIME_dev_manager = "${@["udev", "systemd"][bool(d.getVar("ARAGO_SYSVINIT"))]}"
VIRTUAL-RUNTIME_init_manager = "${@["sysvinit", "systemd"][bool(d.getVar("ARAGO_SYSVINIT"))]}"
VIRTUAL-RUNTIME_initscripts = "${@["initscripts", "systemd-compat-units"][bool(d.getVar("ARAGO_SYSVINIT"))]}"
VIRTUAL-RUNTIME_initramfs = "${@["sysvinit-initramfs", "systemd-initramfs"][bool(d.getVar("ARAGO_SYSVINIT"))]}"
VIRTUAL-RUNTIME_login_manager = "busybox shadow"

DISTRO_FEATURES_append = "${@[""," systemd"][bool(d.getVar("ARAGO_SYSVINIT"))]}"

# Set preferred Qt version
QT_PROVIDER ?= "qt5"

# Distro-specific package configuration
PACKAGECONFIG_append_pn-systemd = " coredump"

# Configure Qt5 flags (GLES is still required for qtdeclarative and qtwebkit)
PACKAGECONFIG_GL_pn-qtbase = "gles2 linuxfb"
PACKAGECONFIG_DISTRO_pn-qtbase = "icu examples accessibility gif gbm kms libinput"
PACKAGECONFIG_FONTS_pn-qtbase = "fontconfig"

# Add gstreamer in package configuration to enable video
PACKAGECONFIG_append_pn-qtmultimedia = " gstreamer"

# Add examples in Qt5 package configurations
PACKAGECONFIG_append_pn-qtcharts = " examples"
#PACKAGECONFIG_append_pn-qtdeclarative = " examples"
PACKAGECONFIG_append_pn-qtlocation = " examples"
PACKAGECONFIG_append_pn-qtmultimedia = " examples"
PACKAGECONFIG_append_pn-qtscript = " examples"
PACKAGECONFIG_append_pn-qtserialport = " examples"
PACKAGECONFIG_append_pn-qtsvg = " examples"
PACKAGECONFIG_append_pn-qtwayland = " examples"
PACKAGECONFIG_append_pn-qtwebengine = " examples"

# Prefer OpenSSL over GnuTLS for curl due to TSU exemptions
PACKAGECONFIG_pn-curl = "${@bb.utils.contains("DISTRO_FEATURES", "ipv6", "ipv6", "", d)} proxy ssl verbose zlib"

PACKAGECONFIG_pn-glmark2 = "drm-gles2 wayland-gles2"

# Enable encryption support in open62541
PACKAGECONFIG_append_pn-open62541 = " encrypt"

# Enable netperf intervals/pacing and histogram
PACKAGECONFIG_append_pn-netperf = " intervals histogram"

# Use OpenGL ES2 for SDL2
PACKAGECONFIG_GL_pn-libsdl2 = "gles2"

# Add KMS/DRM backend support
PACKAGECONFIG_append_pn-libsdl2 = " kmsdrm"

# Enable cryptodev/devcrypto engine in OpenSSL 1.1
PACKAGECONFIG_append_pn-openssl = " cryptodev-linux"

# Enable GST_TRACER logging in gstreamer
PACKAGECONFIG_append_pn-gstreamer1.0 = " tracer-hooks"

# Disable pulseaudio routing in alsa by default
PACKAGECONFIG_remove_pn-alsa-plugins = "pulseaudio"
RDEPENDS_pulseaudio-server_remove = "alsa-plugins-pulseaudio-conf"

# Configure RAMFS for jailhouse linux-demo
JH_RAMFS_IMAGE = "tisdk-tiny-image"

# Enable UI and scripting for perf
PERF_FEATURES_ENABLE ?= "perf-scripting perf-tui"

# Do not warn on meta-gnome w/o x11
SKIP_META_GNOME_SANITY_CHECK = "1"

ARAGO_KERNEL_SUFFIX ?= ""

# Set real-time kernel suffix
ARAGO_RT_ENABLE ?= "0"
ARAGO_KERNEL_SUFFIX_append = "${@oe.utils.conditional("ARAGO_RT_ENABLE", "1", "-rt", "", d)}"

# Set systest kernel suffix
ARAGO_SYSTEST_ENABLE ?= "0"
ARAGO_KERNEL_SUFFIX_append = "${@oe.utils.conditional("ARAGO_SYSTEST_ENABLE", "1", "-systest", "", d)}"
IMAGE_FSTYPES_remove = "${@['','ubi ubifs'][d.getVar('ARAGO_SYSTEST_ENABLE') == '1']}"

# Toolchain should be selected by setting TOOLCHAIN_BRAND in local.conf
# Set some sane defaults, in case someone forgets to set them in local.conf
TC_SANE_DEFAULT ?= "arm"
TOOLCHAIN_TYPE ?= "external"
TOOLCHAIN_TYPE_omapl1 = "internal"
TOOLCHAIN_BRAND ?= "${@[d.getVar('TC_SANE_DEFAULT'),'gcc'][d.getVar('TOOLCHAIN_TYPE') == 'internal']}"

require conf/distro/include/toolchain-${TOOLCHAIN_BRAND}.inc
require conf/distro/include/toolchain-${TOOLCHAIN_TYPE}.inc

# Enable basic stack and buffer overflow protections
#TARGET_CPPFLAGS += "-fstack-protector -D_FORTIFY_SOURCE=1"
#TARGET_CPPFLAGS += "-fstack-protector"

# Inherit "recipe-data" class to populate SRC_URI in manifest
INHERIT += "recipe-data"

# Load default preferences
require conf/distro/include/arago-prefs.inc

# Enable generation of source packages for SDKs
require conf/distro/include/arago-source-ipk.inc

# Allow branding on top of Arago Distro and Core TI-SDK
# If ARAGO_BRAND is not set in local.conf, default to core
ARAGO_BRAND ??= "core"

require conf/distro/include/branding-${ARAGO_BRAND}.inc

# Disable polkit's systemd configuration from meta-oe
POLKITAUTH = ""

# Disable meta-virtualization sanity check and warning
SKIP_META_VIRT_SANITY_CHECK = "1"

# Set ENTERPRISE_DISTRO flag to ensure that recipes that have been flagged
# do not attempt to enable features that have potential commercial
# licensing issues.
ENTERPRISE_DISTRO = "1"

# oe-core uses external libav instead of internal libav for gst-ffmpeg. We
# disable by default the codecs in libav that causes issues with shipping an
# Arago based SDK. No need to prevent gst-ffmpeg from being used since we
# disable troublesome software.
LICENSE_FLAGS_WHITELIST = "commercial_gst-ffmpeg commercial_gstreamer1.0-libav commercial_faad2 non-commercial_netperf"

# Do not package own copy of perl into devkit, rely on host one
ASSUME_PROVIDED += "nativesdk-perl"
